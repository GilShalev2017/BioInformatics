// <auto-generated />
using BioBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BioBackend.Migrations
{
    [DbContext(typeof(BioDbContext))]
    partial class BioDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BioBackend.Models.Disease", b =>
                {
                    b.Property<string>("DiseaseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiseaseID");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("BioBackend.Models.DiseaseGene", b =>
                {
                    b.Property<string>("DiseaseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GeneID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EvidenceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Strength")
                        .HasColumnType("float");

                    b.HasKey("DiseaseID", "GeneID");

                    b.HasIndex("GeneID");

                    b.ToTable("DiseaseGenes");
                });

            modelBuilder.Entity("BioBackend.Models.Drug", b =>
                {
                    b.Property<string>("DrugID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrugID");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("BioBackend.Models.DrugGene", b =>
                {
                    b.Property<string>("DrugID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GeneID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApprovalYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrugID", "GeneID");

                    b.HasIndex("GeneID");

                    b.ToTable("DrugGenes");
                });

            modelBuilder.Entity("BioBackend.Models.Gene", b =>
                {
                    b.Property<string>("GeneID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GeneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeneID");

                    b.ToTable("Genes");
                });

            modelBuilder.Entity("BioBackend.Models.DiseaseGene", b =>
                {
                    b.HasOne("BioBackend.Models.Disease", "Disease")
                        .WithMany("DiseaseGenes")
                        .HasForeignKey("DiseaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioBackend.Models.Gene", "Gene")
                        .WithMany("DiseaseGenes")
                        .HasForeignKey("GeneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Gene");
                });

            modelBuilder.Entity("BioBackend.Models.DrugGene", b =>
                {
                    b.HasOne("BioBackend.Models.Drug", "Drug")
                        .WithMany("DrugGenes")
                        .HasForeignKey("DrugID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BioBackend.Models.Gene", "Gene")
                        .WithMany("DrugGenes")
                        .HasForeignKey("GeneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Gene");
                });

            modelBuilder.Entity("BioBackend.Models.Disease", b =>
                {
                    b.Navigation("DiseaseGenes");
                });

            modelBuilder.Entity("BioBackend.Models.Drug", b =>
                {
                    b.Navigation("DrugGenes");
                });

            modelBuilder.Entity("BioBackend.Models.Gene", b =>
                {
                    b.Navigation("DiseaseGenes");

                    b.Navigation("DrugGenes");
                });
#pragma warning restore 612, 618
        }
    }
}
